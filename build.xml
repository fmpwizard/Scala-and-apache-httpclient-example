<?xml version="1.0" encoding="UTF-8"?>
<project name="Blog-projects" default="default" basedir="."
    xmlns:scalaProject1="http://www.netbeans.org/ns/scala-project/1">
    <description>Builds, tests, and runs the project Blog-projects.</description>
    <property environment="env" />
    <property name="lib.dir" value="lib" />
    <property name="scalaTest.jar" value="${lib.dir}/scalatest-1.0.jar"/>
    <property name="1scala.compiler" value="${scala.home}/lib/scala-compiler.jar"/>
    <property name="1scala.library" value="${scala.home}/lib/scala-library.jar"/>
    <property name="test.classes" value="build/test/classes" />
    <property name="build.classes.dir" value="build/classes" />
    <property name="src.dir" value="src" />
    <property name="test.src.dir" value="test" />
    <property name="build.dir" value="build" />
    <property name="dist.dir" value="dist" />
    <property name="dist.jar" value="${dist.dir}/Blog-projects.jar" />
    <property name="dist.javadoc.dir" value="${dist.dir}/scaladoc" />
    <property name="build.test.classes.dir" value="${build.dir}/test/classes"    />
    <property name="build.test.results.dir" value="${build.dir}/test/results"  />
    <property name="build.classes.excludes"  value="**/*.java,**/*.form,**/*.scala"  />

    <property name="scalac.deprecation" value="no" />
    <property name="scalac.unchecked" value="no" />
    <property name="source.encoding" value="UTF-8" />
    <property name="scalac.compilerargs" value="" />

    <property name="javac.compilerargs" value="" />
    <property name="javac.deprecation" value="false" />
    <property name="javac.source" value="1.5" />
    <property name="javac.target" value="1.5" />

    <property name="javadoc.additionalparam" value="" />

    <property name="javac.classpath" value="${lib.dir}/scalatest-1.0.jar" />
    <property name="javac.test.classpath" value="${lib.dir}/scalatest-1.0.jar" />

    <property name="main.class" value="com.fmpwizard.examples.Main" />
    <property name="manifest.file" value="=manifest.mf" />
    <property name="meta.inf.dir" value="${src.dir}/META-INF" />




    <target depends="test,jar,javadoc" description="Build and test whole project." name="default"/>
    <!--
                ======================
                INITIALIZATION SECTION
                ======================
            -->
    <target depends="" name="-init-private">
        <property environment="env"/>
        <condition property="scala.home" value="${env.SCALA_HOME}">
            <isset property="env.SCALA_HOME"/>
        </condition>
        <fail unless="scala.home">
                    You must set SCALA_HOME
        </fail>
        <property name="scala.compiler" value="${scala.home}/lib/scala-compiler.jar"/>
        <property name="scala.library" value="${scala.home}/lib/scala-library.jar"/>
        <property name="scala.lib" value="${scala.home}/lib"/>
        <taskdef resource="scala/tools/ant/antlib.xml">
            <classpath>
                <pathelement location="${scala.compiler}"/>
                <pathelement location="${scala.library}"/>
            </classpath>
        </taskdef>
    </target>
    <target depends="-init-private" name="-do-init">
        <available file="${manifest.file}" property="manifest.available"/>
        <condition property="manifest.available+main.class">
            <and>
                <isset property="manifest.available"/>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="manifest.available+main.class+mkdist.available">
            <and>
                <istrue value="${manifest.available+main.class}"/>
                <isset property="libs.CopyLibs.classpath"/>
            </and>
        </condition>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="no.javadoc.preview">
            <and>
                <isset property="javadoc.preview"/>
                <isfalse value="${javadoc.preview}"/>
            </and>
        </condition>
        <property name="run.jvmargs" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <property name="javac.debug" value="true"/>
        <property name="javadoc.preview" value="true"/>
        <property name="application.args" value=""/>
        <property name="source.encoding" value="${file.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <property name="extdirs" value=" "/>
        <property name="do.depend" value="false"/>
        <condition property="do.depend.true">
            <istrue value="${do.depend}"/>
        </condition>
        <condition else="" property="javac.compilerargs.jaxws" value="-Djava.endorsed.dirs='${jaxws.endorsed.dir}'">
            <and>
                <isset property="jaxws.endorsed.dir"/>
                <available file="nbproject/jaxws-build.xml"/>
            </and>
        </condition>
    </target>
    <target depends="-init-private,-do-init" name="-init-check">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    <target name="-init-macrodef-javac">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="" name="sourcepath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" includeantruntime="false" includes="@{includes}" source="${javac.source}" sourcepath="@{sourcepath}" srcdir="@{srcdir}" target="${javac.target}">
                    <classpath>
                        <path path="@{classpath}"/>
                        <fileset dir="${scala.lib}">
                            <include name="**/*.jar"/>
                        </fileset>
                    </classpath>
                    <compilerarg line="${javac.compilerargs} ${javac.compilerargs.jaxws}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
        <macrodef name="depend" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <sequential>
                <depend cache="${build.dir}/depcache" destdir="@{destdir}" excludes="${excludes}" includes="${includes}" srcdir="@{srcdir}">
                    <classpath>
                        <path>
                            <pathelement path="@{classpath}"/>
                            <fileset dir="${scala.lib}">
                                <include name="**/*.jar"/>
                            </fileset>
                            <pathelement location="${build.classes.dir}"/>
                        </path>
                    </classpath>
                </depend>
            </sequential>
        </macrodef>
        <macrodef name="force-recompile" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${build.classes.dir}" name="destdir"/>
            <sequential>
                <fail unless="javac.includes">Must set javac.includes</fail>
                <pathconvert pathsep="," property="javac.includes.binary">
                    <path>
                        <filelist dir="@{destdir}" files="${javac.includes}"/>
                    </path>
                    <globmapper from="*.java" to="*.class"/>
                </pathconvert>
                <delete>
                    <files includes="${javac.includes.binary}"/>
                </delete>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-scalac">
        <macrodef name="scalac" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}" name="classpath"/>
            <attribute default="${extdirs}" name="extdirs"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${scalac.compilerargs}" name="addparams"/>
            <attribute default="" name="sourcepath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <scalac addparams=" @{addparams}" deprecation="${scalac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" extdirs="@{extdirs}" force="yes"  includes="@{includes}" sourcepath="@{sourcepath}" srcdir="@{srcdir}" target="jvm-${javac.target}" unchecked="${scalac.unchecked}">
                    <classpath>
                        <path>
                            <pathelement path="@{classpath}"/>
                            <fileset dir="${scala.lib}">
                                <include name="**/*.jar"/>
                            </fileset>
                            <fileset dir="${lib.dir}">
                                <include name="**/*.jar"/>
                            </fileset>
                            <pathelement location="${build.classes.dir}"/>
                        </path>
                    </classpath>
                    <customize/>
                </scalac>
            </sequential>
        </macrodef>
        <macrodef name="force-recompile" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${build.classes.dir}" name="destdir"/>
            <sequential>
                <fail unless="javac.includes">Must set javac.includes</fail>
                <pathconvert pathsep="," property="javac.includes.binary">
                    <path>
                        <filelist dir="@{destdir}" files="${javac.includes}"/>
                    </path>
                    <globmapper from="*.scala" to="*.class"/>
                </pathconvert>
                <delete>
                    <files includes="${javac.includes.binary}"/>
                </delete>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <sequential>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed"  showoutput="true">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${build.test.classes.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                        <fileset dir="${scala.lib}">
                            <include name="**/*.jar"/>
                        </fileset>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg line="${run.jvmargs}"/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/scala-project/1">
            <attribute default="${main.class}" name="classname"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" dir="${work.dir}" >
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="${run.classpath}"/>
                        <fileset dir="${scala.lib}">
                            <include name="**/*.jar"/>
                        </fileset>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>

    </target>
    <target name="-init-macrodef-scala">
      <macrodef name="scala" uri="http://www.netbeans.org/ns/scala-project/1">
        <attribute default="${main.class}" name="classname"/>
        <element name="customize" optional="true"/>
        <sequential>
          <java classname="@{classname}" dir="${work.dir}" >
            <jvmarg line="${run.jvmargs}"/>
            <classpath>
              <path path="${build.classes.dir}"/>
              <fileset dir="${scala.lib}">
                <include name="**/*.jar"/>
              </fileset>
              <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
              </fileset>
            </classpath>
            <syspropertyset>
              <propertyref prefix="run-sys-prop."/>
              <mapper from="run-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
          <customize/>
          </java>
        </sequential>
      </macrodef>
    </target>
    <target name="-init-presetdef-jar">
        <presetdef name="jar" uri="http://www.netbeans.org/ns/scala-project/1">
            <jar compress="${jar.compress}" jarfile="${dist.jar}">
                <scalaProject1:fileset dir="${build.classes.dir}"/>
            </jar>
        </presetdef>
    </target>
    <target depends="-init-private ,-do-init,-init-check,-init-macrodef-javac,-init-macrodef-scalac,-init-macrodef-junit,-init-macrodef-java,-init-macrodef-scala,-init-presetdef-jar" name="init"/>
    <!--
                ===================
                COMPILATION SECTION
                ===================
            -->
    <target depends="init" name="deps-jar" unless="no.deps"/>
    <target depends="init,deps-jar" name="-pre-pre-compile">
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target if="do.depend.true" name="-compile-depend">
        <scalaProject1:depend/>
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-compile-depend" if="have.sources" name="-do-compile">
        <scalaProject1:scalac/>
        <scalaProject1:javac/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes},${excludes}&#10;                        " includes="${includes}"/>
        </copy>
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-do-compile" description="Compile project." name="compile"/>
    <target depends="init,deps-jar,-pre-pre-compile" name="-do-compile-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <scalaProject1:force-recompile/>
        <scalaProject1:scalac excludes="" includes="${javac.includes}" sourcepath="${src.dir}"/>
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-do-compile-single" name="compile-single"/>
    <!--
                ====================
                JAR BUILDING SECTION
                ====================
            -->
    <target depends="init" name="-pre-pre-jar">
        <dirname file="${dist.jar}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
    </target>
    <target depends="init,compile,-pre-pre-jar" name="-do-jar-without-manifest" unless="manifest.available">
        <scalaProject1:jar/>
    </target>
    <target depends="init,compile,-pre-pre-jar" if="manifest.available" name="-do-jar-with-manifest" unless="manifest.available+main.class">
        <scalaProject1:jar manifest="${manifest.file}"/>
    </target>
    <target depends="init,compile,-pre-pre-jar" if="manifest.available+main.class" name="-do-jar-with-mainclass" unless="manifest.available+main.class+mkdist.available">
        <scalaProject1:jar manifest="${manifest.file}">
            <scalaProject1:manifest>
                <scalaProject1:attribute name="Main-Class" value="${main.class}"/>
            </scalaProject1:manifest>
        </scalaProject1:jar>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <pathconvert property="run.classpath.with.dist.jar">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to="${dist.jar.resolved}"/>
        </pathconvert>
        <echo>java -cp "${run.classpath.with.dist.jar}" ${main.class}
                </echo>
    </target>
    <target depends="init,compile,-pre-pre-jar" if="manifest.available+main.class+mkdist.available" name="-do-jar-with-libraries">
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <pathconvert property="run.classpath.without.build.classes.dir">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to=""/>
        </pathconvert>
        <pathconvert pathsep=" " property="jar.classpath">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>
        <taskdef classname="org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs" classpath="${libs.CopyLibs.classpath}" name="copylibs"/>
        <copylibs compress="${jar.compress}" jarfile="${dist.jar}" manifest="${manifest.file}" runtimeclasspath="${run.classpath.without.build.classes.dir}">
            <fileset dir="${build.classes.dir}"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </copylibs>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <echo>java -jar "${dist.jar.resolved}"
                </echo>
    </target>
    <target depends="init,compile,-do-jar-with-manifest,-do-jar-without-manifest,-do-jar-with-mainclass,-do-jar-with-libraries" description="Build JAR." name="jar"/>
    <!--
                =================
                EXECUTION SECTION
                =================
            -->
    <target depends="init,compile" description="Run a main class." name="run">
        <scalaProject1:java>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </scalaProject1:java>
    </target>
    <target name="-do-not-recompile">
        <property name="javac.includes.binary" value=""/>
    </target>
    <target depends="init,-do-not-recompile,compile-single" name="run-single-old">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <scalaProject1:java classname="${run.class}"/>
    </target>
    <!--
                =================
                DEBUGGING SECTION
                =================
            -->
    <target depends="init" if="netbeans.home" name="-debug-start-debugger">
        <scalaProject1:nbjpdastart name="${debug.class}"/>
    </target>
    <target depends="init,compile" name="-debug-start-debuggee">
        <scalaProject1:debug>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </scalaProject1:debug>
    </target>
    <target depends="init,compile,-debug-start-debugger,-debug-start-debuggee" description="Debug project in IDE." if="netbeans.home" name="debug"/>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger-stepinto">
        <scalaProject1:nbjpdastart stopclassname="${main.class}"/>
    </target>
    <target depends="init,compile,-debug-start-debugger-stepinto,-debug-start-debuggee" if="netbeans.home" name="debug-stepinto"/>
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-single">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <scalaProject1:debug classname="${debug.class}"/>
    </target>
    <target depends="init,-do-not-recompile,compile-single,-debug-start-debugger,-debug-start-debuggee-single" if="netbeans.home" name="debug-single"/>
    <target depends="init" name="-pre-debug-fix">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target depends="init,-pre-debug-fix,compile-single" if="netbeans.home" name="-do-debug-fix">
        <scalaProject1:nbjpdareload/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix" if="netbeans.home" name="debug-fix"/>
    <!--
                ===============
                JAVADOC SECTION
                ===============
            -->
    <target depends="init" name="-javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <scaladoc addparams="${javadoc.additionalparam}" deprecation="yes" destdir="${dist.javadoc.dir}" doctitle="${javadoc.windowtitle}" encoding="${javadoc.encoding.used}" srcdir="${src.dir}" unchecked="yes">
            <classpath>
                <path path="${javac.classpath}"/>
                <fileset dir="${scala.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </scaladoc>
    </target>
    <target depends="init,-javadoc-build" if="netbeans.home" name="-javadoc-browse" unless="no.javadoc.preview">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target depends="init,-javadoc-build,-javadoc-browse" description="Build Javadoc." name="javadoc"/>
    <!--
                =========================
                JUNIT COMPILATION SECTION
                =========================
            -->
    <target depends="init,compile" if="have.tests" name="-pre-pre-compile-test">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    <target if="do.depend.true" name="-compile-test-depend">
        <scalaProject1:depend classpath="${javac.test.classpath}" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-compile-test-depend" if="have.tests" name="-do-compile-test">
        <scalaProject1:scalac classpath="${javac.test.classpath}" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}&#10;                        " includes="${includes}"/>
        </copy>
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-do-compile-test" name="compile-test"/>
    <target depends="init,compile,-pre-pre-compile-test" if="have.tests" name="-do-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <scalaProject1:force-recompile destdir="${build.test.classes.dir}"/>
        <scalaProject1:scalac classpath="${javac.test.classpath}" destdir="${build.test.classes.dir}" excludes="" includes="${javac.includes}" sourcepath="${test.src.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}&#10;                        " includes="${includes}"/>
        </copy>
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-do-compile-test-single" name="compile-test-single"/>
    <!--
                =======================
                JUNIT EXECUTION SECTION
                =======================
            -->
    <target depends="init" if="have.tests" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <scalaProject1:junit testincludes="**/*Test.class"/>
    </target>
    <target depends="init,compile-test,-pre-test-run,-do-test-run" if="have.tests" name="-post-test-run">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target depends="init" if="have.tests" name="test-report"/>
    <target depends="init" if="netbeans.home+have.tests" name="-test-browse"/>
    <target depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests." name="test-junit"/>
    <target depends="init" if="have.tests" name="-pre-test-run-single">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <scalaProject1:junit excludes="" includes="${test.includes}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single" if="have.tests" name="-post-test-run-single">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,-do-not-recompile,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test." name="test-single"/>
    <!--
                =======================
                JUNIT DEBUGGING SECTION
                =======================
            -->
    <target depends="init,compile-test" if="have.tests" name="-debug-start-debuggee-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <property location="${build.test.results.dir}/TEST-${test.class}.xml" name="test.report.file"/>
        <delete file="${test.report.file}"/>
        <mkdir dir="${build.test.results.dir}"/>
        <scalaProject1:debug classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner" classpath="${ant.home}/lib/ant.jar:${ant.home}/lib/ant-junit.jar:${debug.test.classpath}">
            <customize>
                <syspropertyset>
                    <propertyref prefix="test-sys-prop."/>
                    <mapper from="test-sys-prop.*" to="*" type="glob"/>
                </syspropertyset>
                <arg value="${test.class}"/>
                <arg value="showoutput=true"/>
                <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter"/>
                <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,${test.report.file}"/>
            </customize>
        </scalaProject1:debug>
    </target>
    <target depends="init,compile-test" if="netbeans.home+have.tests" name="-debug-start-debugger-test">
        <scalaProject1:nbjpdastart classpath="${debug.test.classpath}" name="${test.class}"/>
    </target>
    <target depends="init,-do-not-recompile,compile-test-single,-debug-start-debugger-test,-debug-start-debuggee-test" name="debug-test"/>
    <target depends="init,-pre-debug-fix,compile-test-single" if="netbeans.home" name="-do-debug-fix-test">
        <scalaProject1:nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix-test" if="netbeans.home" name="debug-fix-test"/>
    <!--
                ===============
                CLEANUP SECTION
                ===============
            -->
    <target depends="init" name="deps-clean" unless="no.deps"/>
    <target depends="init" name="-do-clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    <target depends="init,deps-clean,-do-clean" description="Clean build products." name="clean"/>

    <!--
                =================
                SCALATEST SECTION
                =================
             -->

    <path id="scalatest.classpath">
      <pathelement location="${lib.dir}/scalatest-1.0.jar"/>
      <pathelement location="${scala.library}"/>
      <pathelement location="${scala.compiler}"/>
      <pathelement location="${lib.dir}/junit-4.7.jar"/>
      <pathelement location="${lib.dir}/specs-1.6.2.jar"/>
      <pathelement location="${lib.dir}/naggati-0.7.2.jar"/>
      <pathelement location="${lib.dir}/lift-json-1.1-SNAPSHOT.jar"/>
      <pathelement location="${lib.dir}/mina-filter-compression-2.0.0-RC1.jar"/>
      <pathelement location="${lib.dir}/mina-core-2.0.0-RC1.jar"/>
      <pathelement location="${lib.dir}/slf4j-api-1.5.2.jar"/>
      <pathelement location="${lib.dir}/slf4j-jdk14-1.5.2.jar"/>
      <pathelement location="${lib.dir}/commons-codec-1.4.jar"/>
      <pathelement location="${lib.dir}/configgy-1.4.jar"/>
      <pathelement location="${lib.dir}/httpclient-4.0.1.jar"/> 
      <pathelement location="${lib.dir}/httpcore-4.0.1.jar"/>
      <pathelement location="${lib.dir}/commons-logging-1.1.1.jar"/>
      <pathelement location="${build.classes.dir}"/>
    </path>
    <target name="test" depends="init,compile-test,-pre-test-run">
      <taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestAntTask">
        <classpath>
          <fileset dir="${scala.lib}">
            <include name="**/*.jar"/>
          </fileset>
          <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
      </taskdef>
      <scalatest runpath="${test.classes} " haltonfailure="true" fork="false">
        <reporter type="stdout" />
      </scalatest>
    </target>
    <target name="run-single" depends="init,compile">
      <scalaProject1:scala  classname="com.fmpwizard.examples.Main" />
    </target>
</project>





